import 'dart:convert';import 'dart:typed_data';import 'package:flutter/material.dart';import 'package:get/get_connect/http/src/request/request.dart';import 'package:get/get_connect/http/src/response/response.dart';class Logger {  /// Http request log  static void reqLog(Request request, {int baseLineLength = 90}) {    debugPrint("\x1B[34m‚ïî‚ï£ Request ‚ïë METHOD: ${request.method}\x1B[0m");    debugPrint("\x1B[34m‚ïü URL: ${request.url}");    debugPrint("\x1B[34m‚ïü HEADER: ${_getPrettyJSONString(request.headers)}");    debugPrint("\x1B[34m‚ïö${'‚ïê' * baseLineLength}‚ïù\x1B[0m");  }  static void resLog(Response response, {int baseLineLength = 90}) {    final isSuccess = response.isOk;    final color = isSuccess ? "\x1B[32m" : "\x1B[31m"; // Green for success, red for error    final title = isSuccess ? "Response" : "Error Response";    /// Log the Response Title, Method, and Status    debugPrint("$color‚ïî${'‚ïê' * baseLineLength}‚ïó\x1B[0m");    debugPrint(        "$color‚ïë $title ‚ïë METHOD: ${response.request?.method} ‚ïë Status: ${response.statusCode} ${response.statusText}\x1B[0m");    /// Log the Request URL    debugPrint("$color‚ïü URL: ${response.request?.url}\x1B[0m");    /// Log the Headers    final headers = response.headers;    debugPrint("$color‚ïü HEADER: ${_getPrettyJSONString(headers)}\x1B[0m");    /// Safely handle and log the Response Body    final rawBody = response.bodyString; // Use bodyString for the raw body    if (rawBody != null && rawBody.isNotEmpty) {      try {        final jsonBody = jsonDecode(rawBody); // Try parsing JSON        debugPrint("$color‚ïü BODY: ${_getPrettyJSONString(jsonBody)}\x1B[0m");      } catch (e) {        /// Fallback for non-JSON or malformed JSON        debugPrint("$color‚ïü BODY (raw): $rawBody\x1B[0m");        debugPrint("$color‚ïü Parsing Error: $e\x1B[0m");      }    } else {      debugPrint("$color‚ïü BODY: No Content\x1B[0m");    }    debugPrint("$color‚ïö${'‚ïê' * baseLineLength}‚ïù\x1B[0m");  }  static void printUinit8Res(Uint8List responseData, {int baseLineLength = 90}) {    /// Log the response data title    const color = "\x1B[32m"; // Green color for success    const title = "JSON Response";    /// Log the Response Title and Length    debugPrint("$color‚ïî${'‚ïê' * baseLineLength}‚ïó\x1B[0m");    debugPrint("$color‚ïë $title ‚ïë Data Length: ${responseData.length} bytes\x1B[0m");    try {      /// Attempt to decode the Uint8List as a JSON response      final decodedJson = jsonDecode(utf8.decode(responseData));      /// Log the formatted JSON body      debugPrint("$color‚ïü BODY: ${_getPrettyJSONString(decodedJson)}\x1B[0m");    } catch (e) {      /// If the data isn't valid JSON, print an error message      debugPrint("$color‚ïü Invalid JSON or parsing error: $e\x1B[0m");      debugPrint("$color‚ïü Raw Data: ${_getHexString(responseData)}\x1B[0m");    }    debugPrint("$color‚ïö${'‚ïê' * baseLineLength}‚ïù\x1B[0m");  }  /// Helper method to convert Uint8List to a human-readable hex string  static String _getHexString(Uint8List data) {    return data.map((byte) => byte.toRadixString(16).padLeft(2, '0')).join(' ');  }  /// Helper method to prettify JSON strings or objects  static String _getPrettyJSONString(dynamic jsonObject) {    const encoder = JsonEncoder.withIndent('  ');    try {      return encoder.convert(jsonObject);    } catch (e) {      return jsonObject.toString(); // Fallback for non-JSON objects    }  }  /// Query parameters log (specific for Map<String, dynamic>)  static void queryParam(Map<String, dynamic>? params, {int baseLineLength = 50}) {    debugPrint("\x1B[36m‚ïî‚ï£ Request Parameters\x1B[0m");    if (params == null || params.isEmpty) {      debugPrint("\x1B[36m‚ïü No Query Parameters\x1B[0m");    } else {      params.forEach((key, value) {        debugPrint("\x1B[36m‚ïü $key: ${_getPrettyJSONString(value)}\x1B[0m");      });    }    debugPrint("\x1B[36m‚ïö${'‚ïê' * baseLineLength}‚ïù\x1B[0m");  }  /// Error log  static void e(String message) {    debugPrint("\x1B[31m‚ïü ‚õî ERROR :: $message ‚ïë\x1B[0m");  }  /// Information log  static void i(String message) {    debugPrint("\x1B[34m‚ïü üí° INFO :: $message ‚ïë\x1B[0m");  }  /// Warning log  static void w(String message) {    debugPrint("\x1B[33m‚ïü ‚ö†Ô∏è WARNING :: $message ‚ïë\x1B[0m");  }}